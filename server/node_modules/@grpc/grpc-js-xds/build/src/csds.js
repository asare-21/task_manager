"use strict";
/*
 * Copyright 2021 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = exports.registerXdsClientWithCsds = void 0;
const resources_1 = require("./resources");
const grpc_js_1 = require("@grpc/grpc-js");
const proto_loader_1 = require("@grpc/proto-loader");
var registerAdminService = grpc_js_1.experimental.registerAdminService;
const TRACER_NAME = 'csds';
function trace(text) {
    grpc_js_1.experimental.trace(grpc_js_1.logVerbosity.DEBUG, TRACER_NAME, text);
}
function dateToProtoTimestamp(date) {
    if (!date) {
        return null;
    }
    const millisSinceEpoch = date.getTime();
    return {
        seconds: (millisSinceEpoch / 1000) | 0,
        nanos: (millisSinceEpoch % 1000) * 1000000
    };
}
const registeredClients = [];
function registerXdsClientWithCsds(client) {
    registeredClients.push(client);
}
exports.registerXdsClientWithCsds = registerXdsClientWithCsds;
function getCurrentConfigList() {
    const result = [];
    for (const client of registeredClients) {
        if (!client.adsNode) {
            continue;
        }
        const genericConfigList = [];
        for (const [authority, authorityState] of client.authorityStateMap) {
            for (const [type, typeMap] of authorityState.resourceMap) {
                for (const [key, resourceState] of typeMap) {
                    const typeUrl = type.getTypeUrl();
                    const meta = resourceState.meta;
                    genericConfigList.push({
                        name: (0, resources_1.xdsResourceNameToString)({ authority, key }, typeUrl),
                        type_url: typeUrl,
                        client_status: meta.clientStatus,
                        version_info: meta.version,
                        xds_config: meta.clientStatus === 'ACKED' ? meta.rawResource : undefined,
                        last_updated: meta.updateTime ? dateToProtoTimestamp(meta.updateTime) : undefined,
                        error_state: meta.clientStatus === 'NACKED' ? {
                            details: meta.failedDetails,
                            failed_configuration: meta.rawResource,
                            last_update_attempt: meta.failedUpdateTime ? dateToProtoTimestamp(meta.failedUpdateTime) : undefined,
                            version_info: meta.failedVersion
                        } : undefined
                    });
                }
            }
        }
        result.push({
            node: client.adsNode,
            generic_xds_configs: genericConfigList
        });
    }
    return result;
}
const csdsImplementation = {
    FetchClientStatus(call, callback) {
        const request = call.request;
        if (request.node_matchers.length > 0) {
            callback({
                code: grpc_js_1.status.INVALID_ARGUMENT,
                details: 'Node matchers not supported'
            });
            return;
        }
        callback(null, {
            config: getCurrentConfigList()
        });
    },
    StreamClientStatus(call) {
        call.on('data', (request) => {
            if (request.node_matchers.length > 0) {
                call.emit('error', {
                    code: grpc_js_1.status.INVALID_ARGUMENT,
                    details: 'Node matchers not supported'
                });
                return;
            }
            call.write({
                config: getCurrentConfigList()
            });
        });
        call.on('end', () => {
            call.end();
        });
    }
};
const loadedProto = (0, proto_loader_1.loadSync)('envoy/service/status/v3/csds.proto', {
    keepCase: true,
    longs: String,
    enums: String,
    defaults: true,
    oneofs: true,
    includeDirs: [
        // Paths are relative to src/build
        __dirname + '/../../deps/envoy-api/',
        __dirname + '/../../deps/xds/',
        __dirname + '/../../deps/protoc-gen-validate/',
        __dirname + '/../../deps/googleapis/'
    ],
});
const csdsGrpcObject = (0, grpc_js_1.loadPackageDefinition)(loadedProto);
const csdsServiceDefinition = csdsGrpcObject.envoy.service.status.v3.ClientStatusDiscoveryService.service;
function setup() {
    registerAdminService(() => csdsServiceDefinition, () => csdsImplementation);
}
exports.setup = setup;
//# sourceMappingURL=csds.js.map