"use strict";
/*
 * Copyright 2023 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterResourceType = void 0;
const resources_1 = require("../resources");
const xds_resource_type_1 = require("./xds-resource-type");
const grpc_js_1 = require("@grpc/grpc-js");
const environment_1 = require("../environment");
const duration_1 = require("../duration");
const lb_policy_registry_1 = require("../lb-policy-registry");
var parseLoadBalancingConfig = grpc_js_1.experimental.parseLoadBalancingConfig;
const TRACER_NAME = 'xds_client';
function trace(text) {
    grpc_js_1.experimental.trace(grpc_js_1.logVerbosity.DEBUG, TRACER_NAME, text);
}
function convertOutlierDetectionUpdate(outlierDetection) {
    if (!environment_1.EXPERIMENTAL_OUTLIER_DETECTION) {
        return undefined;
    }
    if (!outlierDetection) {
        /* No-op outlier detection config, with all fields unset. */
        return {
            child_policy: []
        };
    }
    let successRateConfig = undefined;
    /* Success rate ejection is enabled by default, so we only disable it if
     * enforcing_success_rate is set and it has the value 0 */
    if (!outlierDetection.enforcing_success_rate || outlierDetection.enforcing_success_rate.value > 0) {
        successRateConfig = {
            enforcement_percentage: outlierDetection.enforcing_success_rate?.value,
            minimum_hosts: outlierDetection.success_rate_minimum_hosts?.value,
            request_volume: outlierDetection.success_rate_request_volume?.value,
            stdev_factor: outlierDetection.success_rate_stdev_factor?.value
        };
    }
    let failurePercentageConfig = undefined;
    /* Failure percentage ejection is disabled by default, so we only enable it
     * if enforcing_failure_percentage is set and it has a value greater than 0 */
    if (outlierDetection.enforcing_failure_percentage && outlierDetection.enforcing_failure_percentage.value > 0) {
        failurePercentageConfig = {
            enforcement_percentage: outlierDetection.enforcing_failure_percentage.value,
            minimum_hosts: outlierDetection.failure_percentage_minimum_hosts?.value,
            request_volume: outlierDetection.failure_percentage_request_volume?.value,
            threshold: outlierDetection.failure_percentage_threshold?.value
        };
    }
    return {
        interval: outlierDetection.interval ? (0, duration_1.protoDurationToDuration)(outlierDetection.interval) : undefined,
        base_ejection_time: outlierDetection.base_ejection_time ? (0, duration_1.protoDurationToDuration)(outlierDetection.base_ejection_time) : undefined,
        max_ejection_time: outlierDetection.max_ejection_time ? (0, duration_1.protoDurationToDuration)(outlierDetection.max_ejection_time) : undefined,
        max_ejection_percent: outlierDetection.max_ejection_percent?.value,
        success_rate_ejection: successRateConfig,
        failure_percentage_ejection: failurePercentageConfig,
        child_policy: []
    };
}
class ClusterResourceType extends xds_resource_type_1.XdsResourceType {
    constructor() {
        super();
    }
    static get() {
        return ClusterResourceType.singleton;
    }
    getTypeUrl() {
        return 'envoy.config.cluster.v3.Cluster';
    }
    validateNonnegativeDuration(duration) {
        if (!duration) {
            return true;
        }
        /* The maximum values here come from the official Protobuf documentation:
         * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Duration
         */
        return Number(duration.seconds) >= 0 &&
            Number(duration.seconds) <= 315576000000 &&
            duration.nanos >= 0 &&
            duration.nanos <= 999999999;
    }
    validatePercentage(percentage) {
        if (!percentage) {
            return true;
        }
        return percentage.value >= 0 && percentage.value <= 100;
    }
    validateResource(context, message) {
        let lbPolicyConfig;
        if (environment_1.EXPERIMENTAL_CUSTOM_LB_CONFIG && message.load_balancing_policy) {
            try {
                lbPolicyConfig = (0, lb_policy_registry_1.convertToLoadBalancingConfig)(message.load_balancing_policy);
            }
            catch (e) {
                trace('LB policy config parsing failed with error ' + e);
                return null;
            }
            try {
                parseLoadBalancingConfig(lbPolicyConfig);
            }
            catch (e) {
                trace('LB policy config parsing failed with error ' + e);
                return null;
            }
        }
        else if (message.lb_policy === 'ROUND_ROBIN') {
            lbPolicyConfig = {
                xds_wrr_locality: {
                    child_policy: [{ round_robin: {} }]
                }
            };
        }
        else if (environment_1.EXPERIMENTAL_RING_HASH && message.lb_policy === 'RING_HASH') {
            if (message.ring_hash_lb_config && message.ring_hash_lb_config.hash_function !== 'XX_HASH') {
                return null;
            }
            const minRingSize = message.ring_hash_lb_config?.minimum_ring_size ? Number(message.ring_hash_lb_config.minimum_ring_size.value) : 1024;
            if (minRingSize > 8388608) {
                return null;
            }
            const maxRingSize = message.ring_hash_lb_config?.maximum_ring_size ? Number(message.ring_hash_lb_config.maximum_ring_size.value) : 8388608;
            if (maxRingSize > 8388608) {
                return null;
            }
            lbPolicyConfig = {
                ring_hash: {
                    min_ring_size: minRingSize,
                    max_ring_size: maxRingSize
                }
            };
        }
        else {
            return null;
        }
        if (message.lrs_server) {
            if (!message.lrs_server.self) {
                return null;
            }
        }
        if (environment_1.EXPERIMENTAL_OUTLIER_DETECTION) {
            if (message.outlier_detection) {
                if (!this.validateNonnegativeDuration(message.outlier_detection.interval)) {
                    return null;
                }
                if (!this.validateNonnegativeDuration(message.outlier_detection.base_ejection_time)) {
                    return null;
                }
                if (!this.validateNonnegativeDuration(message.outlier_detection.max_ejection_time)) {
                    return null;
                }
                if (!this.validatePercentage(message.outlier_detection.max_ejection_percent)) {
                    return null;
                }
                if (!this.validatePercentage(message.outlier_detection.enforcing_success_rate)) {
                    return null;
                }
                if (!this.validatePercentage(message.outlier_detection.failure_percentage_threshold)) {
                    return null;
                }
                if (!this.validatePercentage(message.outlier_detection.enforcing_failure_percentage)) {
                    return null;
                }
            }
        }
        if (message.cluster_discovery_type === 'cluster_type') {
            if (!(message.cluster_type?.typed_config && message.cluster_type.typed_config.type_url === resources_1.CLUSTER_CONFIG_TYPE_URL)) {
                return null;
            }
            const clusterConfig = (0, resources_1.decodeSingleResource)(resources_1.CLUSTER_CONFIG_TYPE_URL, message.cluster_type.typed_config.value);
            if (clusterConfig.clusters.length === 0) {
                return null;
            }
            return {
                type: 'AGGREGATE',
                name: message.name,
                aggregateChildren: clusterConfig.clusters,
                outlierDetectionUpdate: convertOutlierDetectionUpdate(null),
                lbPolicyConfig: [lbPolicyConfig]
            };
        }
        else {
            let maxConcurrentRequests = undefined;
            for (const threshold of message.circuit_breakers?.thresholds ?? []) {
                if (threshold.priority === 'DEFAULT') {
                    maxConcurrentRequests = threshold.max_requests?.value;
                }
            }
            if (message.type === 'EDS') {
                if (!message.eds_cluster_config?.eds_config?.ads && !message.eds_cluster_config?.eds_config?.self) {
                    return null;
                }
                if (message.name.startsWith('xdstp:') && message.eds_cluster_config.service_name === '') {
                    return null;
                }
                return {
                    type: 'EDS',
                    name: message.name,
                    aggregateChildren: [],
                    maxConcurrentRequests: maxConcurrentRequests,
                    edsServiceName: message.eds_cluster_config.service_name === '' ? undefined : message.eds_cluster_config.service_name,
                    lrsLoadReportingServer: message.lrs_server ? context.server : undefined,
                    outlierDetectionUpdate: convertOutlierDetectionUpdate(message.outlier_detection),
                    lbPolicyConfig: [lbPolicyConfig]
                };
            }
            else if (message.type === 'LOGICAL_DNS') {
                if (!message.load_assignment) {
                    return null;
                }
                if (message.load_assignment.endpoints.length !== 1) {
                    return null;
                }
                if (message.load_assignment.endpoints[0].lb_endpoints.length !== 1) {
                    return null;
                }
                const socketAddress = message.load_assignment.endpoints[0].lb_endpoints[0].endpoint?.address?.socket_address;
                if (!socketAddress) {
                    return null;
                }
                if (socketAddress.address === '') {
                    return null;
                }
                if (socketAddress.port_specifier !== 'port_value') {
                    return null;
                }
                return {
                    type: 'LOGICAL_DNS',
                    name: message.name,
                    aggregateChildren: [],
                    maxConcurrentRequests: maxConcurrentRequests,
                    dnsHostname: `${socketAddress.address}:${socketAddress.port_value}`,
                    lrsLoadReportingServer: message.lrs_server ? context.server : undefined,
                    outlierDetectionUpdate: convertOutlierDetectionUpdate(message.outlier_detection),
                    lbPolicyConfig: [lbPolicyConfig]
                };
            }
        }
        return null;
    }
    decode(context, resource) {
        if (resource.type_url !== resources_1.CDS_TYPE_URL) {
            throw new Error(`ADS Error: Invalid resource type ${resource.type_url}, expected ${resources_1.CDS_TYPE_URL}`);
        }
        const message = (0, resources_1.decodeSingleResource)(resources_1.CDS_TYPE_URL, resource.value);
        trace('Decoded raw resource of type ' + resources_1.CDS_TYPE_URL + ': ' + JSON.stringify(message, undefined, 2));
        const validatedMessage = this.validateResource(context, message);
        if (validatedMessage) {
            return {
                name: validatedMessage.name,
                value: validatedMessage
            };
        }
        else {
            return {
                name: message.name,
                error: 'Cluster message validation failed'
            };
        }
    }
    allResourcesRequiredInSotW() {
        return true;
    }
    static startWatch(client, name, watcher) {
        client.watchResource(ClusterResourceType.get(), name, watcher);
    }
    static cancelWatch(client, name, watcher) {
        client.cancelResourceWatch(ClusterResourceType.get(), name, watcher);
    }
}
exports.ClusterResourceType = ClusterResourceType;
ClusterResourceType.singleton = new ClusterResourceType();
//# sourceMappingURL=cluster-resource-type.js.map