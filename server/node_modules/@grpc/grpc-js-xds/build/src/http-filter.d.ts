import { experimental } from '@grpc/grpc-js';
import { Any__Output } from './generated/google/protobuf/Any';
import Filter = experimental.Filter;
import FilterFactory = experimental.FilterFactory;
import { HttpFilter__Output } from './generated/envoy/extensions/filters/network/http_connection_manager/v3/HttpFilter';
export interface HttpFilterConfig {
    typeUrl: string;
    config: any;
}
export interface HttpFilterFactoryConstructor<FilterType extends Filter> {
    new (config: HttpFilterConfig, overrideConfig?: HttpFilterConfig): FilterFactory<FilterType>;
}
export interface HttpFilterRegistryEntry {
    parseTopLevelFilterConfig(encodedConfig: Any__Output): HttpFilterConfig | null;
    parseOverrideFilterConfig(encodedConfig: Any__Output): HttpFilterConfig | null;
    httpFilterConstructor: HttpFilterFactoryConstructor<Filter>;
}
export declare function registerHttpFilter(typeName: string, entry: HttpFilterRegistryEntry): void;
export declare function getTopLevelFilterUrl(encodedConfig: Any__Output): string;
export declare function validateTopLevelFilter(httpFilter: HttpFilter__Output): boolean;
export declare function validateOverrideFilter(encodedConfig: Any__Output): boolean;
export declare function parseTopLevelFilterConfig(encodedConfig: Any__Output): HttpFilterConfig | null;
export declare function parseOverrideFilterConfig(encodedConfig: Any__Output): HttpFilterConfig | null;
export declare function createHttpFilter(config: HttpFilterConfig, overrideConfig?: HttpFilterConfig): FilterFactory<Filter> | null;
