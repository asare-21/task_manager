import { ChannelOptions, experimental } from "@grpc/grpc-js";
import { Locality__Output } from "./generated/envoy/config/core/v3/Locality";
import TypedLoadBalancingConfig = experimental.TypedLoadBalancingConfig;
import LoadBalancer = experimental.LoadBalancer;
import Endpoint = experimental.Endpoint;
import ChildLoadBalancerHandler = experimental.ChildLoadBalancerHandler;
import ChannelControlHelper = experimental.ChannelControlHelper;
import OutlierDetectionRawConfig = experimental.OutlierDetectionRawConfig;
import { XdsServerConfig } from "./xds-bootstrap";
export interface DiscoveryMechanism {
    cluster: string;
    lrs_load_reporting_server?: XdsServerConfig;
    max_concurrent_requests?: number;
    type: 'EDS' | 'LOGICAL_DNS';
    eds_service_name?: string;
    dns_hostname?: string;
    outlier_detection?: OutlierDetectionRawConfig;
}
export declare function localityToName(locality: Locality__Output): string;
export declare class XdsClusterResolver implements LoadBalancer {
    private readonly channelControlHelper;
    private discoveryMechanismList;
    private latestConfig;
    private latestAttributes;
    private xdsClient;
    private childBalancer;
    constructor(channelControlHelper: ChannelControlHelper, options: ChannelOptions);
    private maybeUpdateChild;
    updateAddressList(addressList: Endpoint[], lbConfig: TypedLoadBalancingConfig, attributes: {
        [key: string]: unknown;
    }): void;
    exitIdle(): void;
    resetBackoff(): void;
    destroy(): void;
    getTypeName(): string;
}
export declare class XdsClusterResolverChildPolicyHandler extends ChildLoadBalancerHandler {
    protected configUpdateRequiresNewPolicyInstance(oldConfig: TypedLoadBalancingConfig, newConfig: TypedLoadBalancingConfig): boolean;
}
export declare function setup(): void;
