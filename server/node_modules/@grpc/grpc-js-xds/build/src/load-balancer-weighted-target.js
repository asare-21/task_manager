"use strict";
/*
 * Copyright 2020 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = exports.WeightedTargetLoadBalancer = void 0;
const grpc_js_1 = require("@grpc/grpc-js");
const load_balancer_priority_1 = require("./load-balancer-priority");
var registerLoadBalancerType = grpc_js_1.experimental.registerLoadBalancerType;
var ChildLoadBalancerHandler = grpc_js_1.experimental.ChildLoadBalancerHandler;
var QueuePicker = grpc_js_1.experimental.QueuePicker;
var UnavailablePicker = grpc_js_1.experimental.UnavailablePicker;
var endpointToString = grpc_js_1.experimental.endpointToString;
var selectLbConfigFromList = grpc_js_1.experimental.selectLbConfigFromList;
const TRACER_NAME = 'weighted_target';
function trace(text) {
    grpc_js_1.experimental.trace(grpc_js_1.logVerbosity.DEBUG, TRACER_NAME, text);
}
const TYPE_NAME = 'weighted_target';
const DEFAULT_RETENTION_INTERVAL_MS = 15 * 60 * 1000;
class WeightedTargetLoadBalancingConfig {
    getLoadBalancerName() {
        return TYPE_NAME;
    }
    constructor(targets) {
        this.targets = targets;
    }
    getTargets() {
        return this.targets;
    }
    toJsonObject() {
        const targetsField = {};
        for (const [targetName, targetValue] of this.targets.entries()) {
            targetsField[targetName] = {
                weight: targetValue.weight,
                child_policy: [targetValue.child_policy.toJsonObject()]
            };
        }
        return {
            [TYPE_NAME]: {
                targets: targetsField
            }
        };
    }
    static createFromJson(obj) {
        const targetsMap = new Map();
        if (!('targets' in obj && obj.targets !== null && typeof obj.targets === 'object')) {
            throw new Error('Weighted target config must have a targets map');
        }
        for (const key of Object.keys(obj.targets)) {
            const targetObj = obj.targets[key];
            if (!('weight' in targetObj && typeof targetObj.weight === 'number')) {
                throw new Error(`Weighted target ${key} must have a numeric weight`);
            }
            if (!('child_policy' in targetObj && Array.isArray(targetObj.child_policy))) {
                throw new Error(`Weighted target ${key} must have a child_policy array`);
            }
            const childConfig = selectLbConfigFromList(targetObj.child_policy);
            if (!childConfig) {
                throw new Error(`Weighted target ${key} config parsing failed`);
            }
            const validatedTarget = {
                weight: targetObj.weight,
                child_policy: childConfig
            };
            targetsMap.set(key, validatedTarget);
        }
        return new WeightedTargetLoadBalancingConfig(targetsMap);
    }
}
class WeightedTargetPicker {
    constructor(pickerList) {
        this.pickerList = pickerList;
        this.rangeTotal = pickerList[pickerList.length - 1].rangeEnd;
    }
    pick(pickArgs) {
        // num | 0 is equivalent to floor(num)
        const selection = (Math.random() * this.rangeTotal) | 0;
        for (const entry of this.pickerList) {
            if (selection < entry.rangeEnd) {
                return entry.picker.pick(pickArgs);
            }
        }
        /* Default to first element if the iteration doesn't find anything for some
         * reason. */
        return this.pickerList[0].picker.pick(pickArgs);
    }
}
class WeightedTargetLoadBalancer {
    constructor(channelControlHelper, options) {
        this.channelControlHelper = channelControlHelper;
        this.options = options;
        this.WeightedChildImpl = class {
            constructor(parent, name) {
                this.parent = parent;
                this.name = name;
                this.connectivityState = grpc_js_1.connectivityState.IDLE;
                this.deactivationTimer = null;
                this.weight = 0;
                this.childBalancer = new ChildLoadBalancerHandler(grpc_js_1.experimental.createChildChannelControlHelper(this.parent.channelControlHelper, {
                    updateState: (connectivityState, picker) => {
                        this.updateState(connectivityState, picker);
                    },
                }), parent.options);
                this.picker = new QueuePicker(this.childBalancer);
            }
            updateState(connectivityState, picker) {
                trace('Target ' + this.name + ' ' + grpc_js_1.connectivityState[this.connectivityState] + ' -> ' + grpc_js_1.connectivityState[connectivityState]);
                this.connectivityState = connectivityState;
                this.picker = picker;
                this.parent.maybeUpdateState();
            }
            updateAddressList(endpointList, lbConfig, attributes) {
                this.weight = lbConfig.weight;
                this.childBalancer.updateAddressList(endpointList, lbConfig.child_policy, attributes);
            }
            exitIdle() {
                this.childBalancer.exitIdle();
            }
            resetBackoff() {
                this.childBalancer.resetBackoff();
            }
            destroy() {
                this.childBalancer.destroy();
                if (this.deactivationTimer !== null) {
                    clearTimeout(this.deactivationTimer);
                }
            }
            deactivate() {
                if (this.deactivationTimer === null) {
                    this.deactivationTimer = setTimeout(() => {
                        this.parent.targets.delete(this.name);
                        this.deactivationTimer = null;
                    }, DEFAULT_RETENTION_INTERVAL_MS);
                }
            }
            maybeReactivate() {
                if (this.deactivationTimer !== null) {
                    clearTimeout(this.deactivationTimer);
                    this.deactivationTimer = null;
                }
            }
            getConnectivityState() {
                return this.connectivityState;
            }
            getPicker() {
                return this.picker;
            }
            getWeight() {
                return this.weight;
            }
        };
        // end of WeightedChildImpl
        /**
         * Map of target names to target children. Includes current targets and
         * previous targets with deactivation timers that have not yet triggered.
         */
        this.targets = new Map();
        /**
         * List of current target names.
         */
        this.targetList = [];
        this.updatesPaused = false;
    }
    maybeUpdateState() {
        if (!this.updatesPaused) {
            this.updateState();
        }
    }
    updateState() {
        const pickerList = [];
        let end = 0;
        let connectingCount = 0;
        let idleCount = 0;
        let transientFailureCount = 0;
        for (const targetName of this.targetList) {
            const target = this.targets.get(targetName);
            if (target === undefined) {
                continue;
            }
            switch (target.getConnectivityState()) {
                case grpc_js_1.connectivityState.READY:
                    end += target.getWeight();
                    pickerList.push({
                        picker: target.getPicker(),
                        rangeEnd: end
                    });
                    break;
                case grpc_js_1.connectivityState.CONNECTING:
                    connectingCount += 1;
                    break;
                case grpc_js_1.connectivityState.IDLE:
                    idleCount += 1;
                    break;
                case grpc_js_1.connectivityState.TRANSIENT_FAILURE:
                    transientFailureCount += 1;
                    break;
                default:
                // Ignore the other possiblity, SHUTDOWN
            }
        }
        let connectivityState;
        if (pickerList.length > 0) {
            connectivityState = grpc_js_1.connectivityState.READY;
        }
        else if (connectingCount > 0) {
            connectivityState = grpc_js_1.connectivityState.CONNECTING;
        }
        else if (idleCount > 0) {
            connectivityState = grpc_js_1.connectivityState.IDLE;
        }
        else {
            connectivityState = grpc_js_1.connectivityState.TRANSIENT_FAILURE;
        }
        let picker;
        switch (connectivityState) {
            case grpc_js_1.connectivityState.READY:
                picker = new WeightedTargetPicker(pickerList);
                break;
            case grpc_js_1.connectivityState.CONNECTING:
            case grpc_js_1.connectivityState.IDLE:
                picker = new QueuePicker(this);
                break;
            default:
                picker = new UnavailablePicker({
                    code: grpc_js_1.status.UNAVAILABLE,
                    details: 'weighted_target: all children report state TRANSIENT_FAILURE',
                    metadata: new grpc_js_1.Metadata()
                });
        }
        trace('Transitioning to ' +
            grpc_js_1.connectivityState[connectivityState]);
        this.channelControlHelper.updateState(connectivityState, picker);
    }
    updateAddressList(addressList, lbConfig, attributes) {
        if (!(lbConfig instanceof WeightedTargetLoadBalancingConfig)) {
            // Reject a config of the wrong type
            trace('Discarding address list update with unrecognized config ' + JSON.stringify(lbConfig.toJsonObject(), undefined, 2));
            return;
        }
        /* For each address, the first element of its localityPath array determines
         * which child it belongs to. So we bucket those addresses by that first
         * element, and pass along the rest of the localityPath for that child
         * to use. */
        const childEndpointMap = new Map();
        for (const address of addressList) {
            if (!(0, load_balancer_priority_1.isLocalityEndpoint)(address)) {
                // Reject address that cannot be associated with targets
                return;
            }
            if (address.localityPath.length < 1) {
                // Reject address that cannot be associated with targets
                return;
            }
            const childName = address.localityPath[0];
            const childAddress = {
                ...address,
                localityPath: address.localityPath.slice(1),
            };
            let childAddressList = childEndpointMap.get(childName);
            if (childAddressList === undefined) {
                childAddressList = [];
                childEndpointMap.set(childName, childAddressList);
            }
            childAddressList.push(childAddress);
        }
        this.updatesPaused = true;
        this.targetList = Array.from(lbConfig.getTargets().keys());
        for (const [targetName, targetConfig] of lbConfig.getTargets()) {
            let target = this.targets.get(targetName);
            if (target === undefined) {
                target = new this.WeightedChildImpl(this, targetName);
                this.targets.set(targetName, target);
            }
            else {
                target.maybeReactivate();
            }
            const targetEndpoints = childEndpointMap.get(targetName) ?? [];
            trace('Assigning target ' + targetName + ' address list ' + targetEndpoints.map(endpoint => '(' + endpointToString(endpoint) + ' path=' + endpoint.localityPath + ')'));
            target.updateAddressList(targetEndpoints, targetConfig, attributes);
        }
        // Deactivate targets that are not in the new config
        for (const [targetName, target] of this.targets) {
            if (this.targetList.indexOf(targetName) < 0) {
                trace('Deactivating target ' + targetName);
                target.deactivate();
            }
        }
        this.updatesPaused = false;
        this.updateState();
    }
    exitIdle() {
        for (const targetName of this.targetList) {
            this.targets.get(targetName)?.exitIdle();
        }
    }
    resetBackoff() {
        for (const targetName of this.targetList) {
            this.targets.get(targetName)?.resetBackoff();
        }
    }
    destroy() {
        for (const target of this.targets.values()) {
            target.destroy();
        }
        this.targets.clear();
    }
    getTypeName() {
        return TYPE_NAME;
    }
}
exports.WeightedTargetLoadBalancer = WeightedTargetLoadBalancer;
function setup() {
    registerLoadBalancerType(TYPE_NAME, WeightedTargetLoadBalancer, WeightedTargetLoadBalancingConfig);
}
exports.setup = setup;
//# sourceMappingURL=load-balancer-weighted-target.js.map