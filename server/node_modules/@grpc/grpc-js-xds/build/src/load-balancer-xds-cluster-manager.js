"use strict";
/*
 * Copyright 2020 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = void 0;
const grpc_js_1 = require("@grpc/grpc-js/");
var PickResultType = grpc_js_1.experimental.PickResultType;
var QueuePicker = grpc_js_1.experimental.QueuePicker;
var ChildLoadBalancerHandler = grpc_js_1.experimental.ChildLoadBalancerHandler;
var selectLbConfigFromList = grpc_js_1.experimental.selectLbConfigFromList;
var registerLoadBalancerType = grpc_js_1.experimental.registerLoadBalancerType;
const TRACER_NAME = 'xds_cluster_manager';
function trace(text) {
    grpc_js_1.experimental.trace(grpc_js_1.logVerbosity.DEBUG, TRACER_NAME, text);
}
const TYPE_NAME = 'xds_cluster_manager';
class XdsClusterManagerLoadBalancingConfig {
    getLoadBalancerName() {
        return TYPE_NAME;
    }
    constructor(children) {
        this.children = children;
    }
    getChildren() {
        return this.children;
    }
    toJsonObject() {
        const childrenField = {};
        for (const [childName, childPolicy] of this.children.entries()) {
            childrenField[childName] = {
                child_policy: [childPolicy.toJsonObject()]
            };
        }
        return {
            [TYPE_NAME]: {
                children: childrenField
            }
        };
    }
    static createFromJson(obj) {
        const childrenMap = new Map();
        if (!('children' in obj && obj.children !== null && typeof obj.children === 'object')) {
            throw new Error('xds_cluster_manager config must have a children map');
        }
        for (const key of Object.keys(obj.children)) {
            const childObj = obj.children[key];
            if (!('child_policy' in childObj && Array.isArray(childObj.child_policy))) {
                throw new Error(`xds_cluster_manager child ${key} must have a child_policy array`);
            }
            const childPolicy = selectLbConfigFromList(childObj.child_policy);
            if (childPolicy === null) {
                throw new Error(`xds_cluster_mananger child ${key} has no recognized sucessfully parsed child_policy`);
            }
            childrenMap.set(key, childPolicy);
        }
        return new XdsClusterManagerLoadBalancingConfig(childrenMap);
    }
}
class XdsClusterManagerPicker {
    constructor(childPickers) {
        this.childPickers = childPickers;
    }
    pick(pickArgs) {
        /* extraPickInfo.cluster should be set for all calls by the config selector
         * corresponding to the service config that specified the use of this LB
         * policy. */
        const cluster = pickArgs.extraPickInfo.cluster ?? '';
        if (this.childPickers.has(cluster)) {
            return this.childPickers.get(cluster).pick(pickArgs);
        }
        else {
            return {
                pickResultType: PickResultType.TRANSIENT_FAILURE,
                status: {
                    code: grpc_js_1.status.INTERNAL,
                    details: `Requested cluster ${cluster} not found`,
                    metadata: new grpc_js_1.Metadata(),
                },
                subchannel: null,
                onCallStarted: null,
                onCallEnded: null
            };
        }
    }
}
class XdsClusterManager {
    constructor(channelControlHelper, options) {
        this.channelControlHelper = channelControlHelper;
        this.options = options;
        this.XdsClusterManagerChildImpl = class {
            constructor(parent, name) {
                this.parent = parent;
                this.name = name;
                this.connectivityState = grpc_js_1.connectivityState.IDLE;
                this.childBalancer = new ChildLoadBalancerHandler(grpc_js_1.experimental.createChildChannelControlHelper(this.parent.channelControlHelper, {
                    updateState: (connectivityState, picker) => {
                        this.updateState(connectivityState, picker);
                    },
                }), parent.options);
                this.picker = new QueuePicker(this.childBalancer);
            }
            updateState(connectivityState, picker) {
                trace('Child ' + this.name + ' ' + grpc_js_1.connectivityState[this.connectivityState] + ' -> ' + grpc_js_1.connectivityState[connectivityState]);
                this.connectivityState = connectivityState;
                this.picker = picker;
                this.parent.maybeUpdateState();
            }
            updateAddressList(endpointList, childConfig, attributes) {
                this.childBalancer.updateAddressList(endpointList, childConfig, attributes);
            }
            exitIdle() {
                this.childBalancer.exitIdle();
            }
            resetBackoff() {
                this.childBalancer.resetBackoff();
            }
            destroy() {
                this.childBalancer.destroy();
            }
            getConnectivityState() {
                return this.connectivityState;
            }
            getPicker() {
                return this.picker;
            }
        };
        // End of XdsClusterManagerChildImpl
        this.children = new Map();
        // Shutdown is a placeholder value that will never appear in normal operation.
        this.currentState = grpc_js_1.connectivityState.SHUTDOWN;
        this.updatesPaused = false;
    }
    maybeUpdateState() {
        if (!this.updatesPaused) {
            this.updateState();
        }
    }
    updateState() {
        const pickerMap = new Map();
        let anyReady = false;
        let anyConnecting = false;
        let anyIdle = false;
        for (const [name, child] of this.children.entries()) {
            pickerMap.set(name, child.getPicker());
            switch (child.getConnectivityState()) {
                case grpc_js_1.connectivityState.READY:
                    anyReady = true;
                    break;
                case grpc_js_1.connectivityState.CONNECTING:
                    anyConnecting = true;
                    break;
                case grpc_js_1.connectivityState.IDLE:
                    anyIdle = true;
                    break;
            }
        }
        let connectivityState;
        if (anyReady) {
            connectivityState = grpc_js_1.connectivityState.READY;
        }
        else if (anyConnecting) {
            connectivityState = grpc_js_1.connectivityState.CONNECTING;
        }
        else if (anyIdle) {
            connectivityState = grpc_js_1.connectivityState.IDLE;
        }
        else {
            connectivityState = grpc_js_1.connectivityState.TRANSIENT_FAILURE;
        }
        this.channelControlHelper.updateState(connectivityState, new XdsClusterManagerPicker(pickerMap));
    }
    updateAddressList(endpointList, lbConfig, attributes) {
        if (!(lbConfig instanceof XdsClusterManagerLoadBalancingConfig)) {
            // Reject a config of the wrong type
            trace('Discarding address list update with unrecognized config ' + JSON.stringify(lbConfig.toJsonObject(), undefined, 2));
            return;
        }
        trace('Received update with config: ' + JSON.stringify(lbConfig.toJsonObject(), undefined, 2));
        const configChildren = lbConfig.getChildren();
        // Delete children that are not in the new config
        const namesToRemove = [];
        for (const name of this.children.keys()) {
            if (!configChildren.has(name)) {
                namesToRemove.push(name);
            }
        }
        this.updatesPaused = true;
        for (const name of namesToRemove) {
            this.children.get(name).destroy();
            this.children.delete(name);
        }
        // Add new children that were not in the previous config
        for (const [name, childConfig] of configChildren.entries()) {
            if (!this.children.has(name)) {
                const newChild = new this.XdsClusterManagerChildImpl(this, name);
                newChild.updateAddressList(endpointList, childConfig, attributes);
                this.children.set(name, newChild);
            }
        }
        this.updatesPaused = false;
        this.updateState();
    }
    exitIdle() {
        for (const child of this.children.values()) {
            child.exitIdle();
        }
    }
    resetBackoff() {
        for (const child of this.children.values()) {
            child.resetBackoff();
        }
    }
    destroy() {
        for (const child of this.children.values()) {
            child.destroy();
        }
        this.children.clear();
    }
    getTypeName() {
        return TYPE_NAME;
    }
}
function setup() {
    registerLoadBalancerType(TYPE_NAME, XdsClusterManager, XdsClusterManagerLoadBalancingConfig);
}
exports.setup = setup;
//# sourceMappingURL=load-balancer-xds-cluster-manager.js.map