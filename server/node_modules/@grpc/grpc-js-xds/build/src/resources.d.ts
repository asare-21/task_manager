/// <reference types="node" />
import '@grpc/proto-loader';
import { Cluster__Output } from './generated/envoy/config/cluster/v3/Cluster';
import { ClusterLoadAssignment__Output } from './generated/envoy/config/endpoint/v3/ClusterLoadAssignment';
import { Listener__Output } from './generated/envoy/config/listener/v3/Listener';
import { RouteConfiguration__Output } from './generated/envoy/config/route/v3/RouteConfiguration';
import { ClusterConfig__Output } from './generated/envoy/extensions/clusters/aggregate/v3/ClusterConfig';
import { HttpConnectionManager__Output } from './generated/envoy/extensions/filters/network/http_connection_manager/v3/HttpConnectionManager';
export declare const EDS_TYPE_URL = "type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment";
export declare const CDS_TYPE_URL = "type.googleapis.com/envoy.config.cluster.v3.Cluster";
export declare const LDS_TYPE_URL = "type.googleapis.com/envoy.config.listener.v3.Listener";
export declare const RDS_TYPE_URL = "type.googleapis.com/envoy.config.route.v3.RouteConfiguration";
export type EdsTypeUrl = 'type.googleapis.com/envoy.config.endpoint.v3.ClusterLoadAssignment';
export type CdsTypeUrl = 'type.googleapis.com/envoy.config.cluster.v3.Cluster';
export type LdsTypeUrl = 'type.googleapis.com/envoy.config.listener.v3.Listener';
export type RdsTypeUrl = 'type.googleapis.com/envoy.config.route.v3.RouteConfiguration';
export type AdsTypeUrl = EdsTypeUrl | CdsTypeUrl | RdsTypeUrl | LdsTypeUrl;
export declare const HTTP_CONNECTION_MANGER_TYPE_URL = "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager";
export type HttpConnectionManagerTypeUrl = 'type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager';
export declare const CLUSTER_CONFIG_TYPE_URL = "type.googleapis.com/envoy.extensions.clusters.aggregate.v3.ClusterConfig";
export type ClusterConfigTypeUrl = 'type.googleapis.com/envoy.extensions.clusters.aggregate.v3.ClusterConfig';
/**
 * Map type URLs to their corresponding message types
 */
export type AdsOutputType<T extends AdsTypeUrl | HttpConnectionManagerTypeUrl | ClusterConfigTypeUrl> = T extends EdsTypeUrl ? ClusterLoadAssignment__Output : T extends CdsTypeUrl ? Cluster__Output : T extends RdsTypeUrl ? RouteConfiguration__Output : T extends LdsTypeUrl ? Listener__Output : T extends HttpConnectionManagerTypeUrl ? HttpConnectionManager__Output : ClusterConfig__Output;
export declare function decodeSingleResource<T extends AdsTypeUrl | HttpConnectionManagerTypeUrl | ClusterConfigTypeUrl>(targetTypeUrl: T, message: Buffer): AdsOutputType<T>;
export interface XdsResourceName {
    authority: string;
    key: string;
}
export declare function parseXdsResourceName(name: string, typeUrl: string): XdsResourceName;
export declare function xdsResourceNameToString(name: XdsResourceName, typeUrl: string): string;
