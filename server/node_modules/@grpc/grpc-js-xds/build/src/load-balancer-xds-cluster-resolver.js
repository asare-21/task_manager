"use strict";
/*
 * Copyright 2023 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = exports.XdsClusterResolverChildPolicyHandler = exports.XdsClusterResolver = exports.localityToName = void 0;
const grpc_js_1 = require("@grpc/grpc-js");
const load_balancer_1 = require("@grpc/grpc-js/build/src/load-balancer");
const environment_1 = require("./environment");
const xds_client_1 = require("./xds-client");
var ChildLoadBalancerHandler = grpc_js_1.experimental.ChildLoadBalancerHandler;
var createResolver = grpc_js_1.experimental.createResolver;
var endpointToString = grpc_js_1.experimental.endpointToString;
var parseLoadBalancingConfig = grpc_js_1.experimental.parseLoadBalancingConfig;
var UnavailablePicker = grpc_js_1.experimental.UnavailablePicker;
const xds_bootstrap_1 = require("./xds-bootstrap");
const endpoint_resource_type_1 = require("./xds-resource-type/endpoint-resource-type");
const TRACER_NAME = 'xds_cluster_resolver';
function trace(text) {
    grpc_js_1.experimental.trace(grpc_js_1.logVerbosity.DEBUG, TRACER_NAME, text);
}
function validateDiscoveryMechanism(obj) {
    if (!('cluster' in obj && typeof obj.cluster === 'string')) {
        throw new Error('discovery_mechanisms entry must have a string field cluster');
    }
    if (!('type' in obj && (obj.type === 'EDS' || obj.type === 'LOGICAL_DNS'))) {
        throw new Error('discovery_mechanisms entry must have a field "type" with the value "EDS" or "LOGICAL_DNS"');
    }
    if ('max_concurrent_requests' in obj && obj.max_concurrent_requests !== undefined && typeof obj.max_concurrent_requests !== "number") {
        throw new Error('discovery_mechanisms entry max_concurrent_requests field must be a number if provided');
    }
    if ('eds_service_name' in obj && obj.eds_service_name !== undefined && typeof obj.eds_service_name !== 'string') {
        throw new Error('discovery_mechanisms entry eds_service_name field must be a string if provided');
    }
    if ('dns_hostname' in obj && obj.dns_hostname !== undefined && typeof obj.dns_hostname !== 'string') {
        throw new Error('discovery_mechanisms entry dns_hostname field must be a string if provided');
    }
    return { ...obj, lrs_load_reporting_server: obj.lrs_load_reporting_server ? (0, xds_bootstrap_1.validateXdsServerConfig)(obj.lrs_load_reporting_server) : undefined };
}
const TYPE_NAME = 'xds_cluster_resolver';
class XdsClusterResolverLoadBalancingConfig {
    getLoadBalancerName() {
        return TYPE_NAME;
    }
    toJsonObject() {
        return {
            [TYPE_NAME]: {
                discovery_mechanisms: this.discoveryMechanisms,
                xds_lb_policy: this.xdsLbPolicy
            }
        };
    }
    constructor(discoveryMechanisms, xdsLbPolicy) {
        this.discoveryMechanisms = discoveryMechanisms;
        this.xdsLbPolicy = xdsLbPolicy;
    }
    getDiscoveryMechanisms() {
        return this.discoveryMechanisms;
    }
    getXdsLbPolicy() {
        return this.xdsLbPolicy;
    }
    static createFromJson(obj) {
        if (!('discovery_mechanisms' in obj && Array.isArray(obj.discovery_mechanisms))) {
            throw new Error('xds_cluster_resolver config must have a discovery_mechanisms array');
        }
        if (!('xds_lb_policy' in obj && Array.isArray(obj.xds_lb_policy))) {
            throw new Error('xds_cluster_resolver config must have a xds_lb_policy array');
        }
        return new XdsClusterResolverLoadBalancingConfig(obj.discovery_mechanisms.map(validateDiscoveryMechanism), obj.xds_lb_policy);
    }
}
function getEdsPriorities(edsUpdate) {
    const result = [];
    const dropCategories = [];
    if (edsUpdate.policy) {
        for (const dropOverload of edsUpdate.policy.drop_overloads) {
            if (!dropOverload.drop_percentage) {
                continue;
            }
            let requestsPerMillion;
            switch (dropOverload.drop_percentage.denominator) {
                case 'HUNDRED':
                    requestsPerMillion = dropOverload.drop_percentage.numerator * 10000;
                    break;
                case 'TEN_THOUSAND':
                    requestsPerMillion = dropOverload.drop_percentage.numerator * 100;
                    break;
                case 'MILLION':
                    requestsPerMillion = dropOverload.drop_percentage.numerator;
                    break;
            }
            dropCategories.push({
                category: dropOverload.category,
                requests_per_million: requestsPerMillion
            });
        }
    }
    for (const endpoint of edsUpdate.endpoints) {
        if (!endpoint.load_balancing_weight) {
            continue;
        }
        const endpoints = endpoint.lb_endpoints.filter(lbEndpoint => lbEndpoint.health_status === 'UNKNOWN' || lbEndpoint.health_status === 'HEALTHY').map((lbEndpoint) => {
            /* The validator in the XdsClient class ensures that each endpoint has
             * a socket_address with an IP address and a port_value. */
            const socketAddress = lbEndpoint.endpoint.address.socket_address;
            return {
                endpoint: {
                    addresses: [{
                            host: socketAddress.address,
                            port: socketAddress.port_value,
                        }]
                },
                weight: lbEndpoint.load_balancing_weight?.value ?? 1
            };
        });
        if (endpoints.length === 0) {
            continue;
        }
        let priorityEntry;
        if (result[endpoint.priority]) {
            priorityEntry = result[endpoint.priority];
        }
        else {
            priorityEntry = {
                localities: [],
                dropCategories: dropCategories
            };
            result[endpoint.priority] = priorityEntry;
        }
        priorityEntry.localities.push({
            locality: endpoint.locality,
            endpoints: endpoints,
            weight: endpoint.load_balancing_weight.value
        });
    }
    // Collapse spaces in sparse array
    return result.filter(priority => priority);
}
function getDnsPriorities(endpoints) {
    return [{
            localities: [{
                    locality: {
                        region: '',
                        zone: '',
                        sub_zone: ''
                    },
                    weight: 1,
                    endpoints: endpoints.map(endpoint => ({ endpoint: endpoint, weight: 1 }))
                }],
            dropCategories: []
        }];
}
function localityToName(locality) {
    return `{region=${locality.region},zone=${locality.zone},sub_zone=${locality.sub_zone}}`;
}
exports.localityToName = localityToName;
function getNextPriorityName(entry) {
    return `cluster=${entry.discoveryMechanism.cluster}, child_number=${entry.nextPriorityChildNumber++}`;
}
class XdsClusterResolver {
    constructor(channelControlHelper, options) {
        this.channelControlHelper = channelControlHelper;
        this.discoveryMechanismList = [];
        this.latestConfig = null;
        this.latestAttributes = {};
        this.xdsClient = null;
        this.childBalancer = new ChildLoadBalancerHandler(grpc_js_1.experimental.createChildChannelControlHelper(channelControlHelper, {
            requestReresolution: () => {
                for (const entry of this.discoveryMechanismList) {
                    entry.resolver?.updateResolution();
                }
            }
        }), options);
    }
    maybeUpdateChild() {
        if (!this.latestConfig) {
            return;
        }
        for (const entry of this.discoveryMechanismList) {
            if (!entry.latestUpdate) {
                return;
            }
        }
        const fullPriorityList = [];
        const priorityChildren = {};
        const endpointList = [];
        const edsChildPolicy = this.latestConfig.getXdsLbPolicy();
        for (const entry of this.discoveryMechanismList) {
            const newPriorityNames = [];
            const newLocalityPriorities = new Map();
            const xdsClusterImplChildPolicy = entry.discoveryMechanism.type === 'EDS' ? edsChildPolicy : [{ pick_first: {} }];
            for (const [priority, priorityEntry] of entry.latestUpdate.entries()) {
                /**
                 * Highest (smallest number) priority value that any of the localities in
                 * this locality array had a in the previous mapping.
                 */
                let highestOldPriority = Infinity;
                for (const localityObj of priorityEntry.localities) {
                    const oldPriority = entry.localityPriorities.get(localityToName(localityObj.locality));
                    if (oldPriority !== undefined &&
                        oldPriority >= priority &&
                        oldPriority < highestOldPriority) {
                        highestOldPriority = oldPriority;
                    }
                }
                let newPriorityName;
                if (highestOldPriority === Infinity) {
                    /* No existing priority at or below the same number as the priority we
                     * are looking at had any of the localities in this priority. So, we
                     * use a new name. */
                    newPriorityName = getNextPriorityName(entry);
                }
                else {
                    const newName = entry.priorityNames[highestOldPriority];
                    if (newPriorityNames.indexOf(newName) < 0) {
                        newPriorityName = newName;
                    }
                    else {
                        newPriorityName = getNextPriorityName(entry);
                    }
                }
                newPriorityNames[priority] = newPriorityName;
                for (const localityObj of priorityEntry.localities) {
                    for (const weightedEndpoint of localityObj.endpoints) {
                        endpointList.push({
                            localityPath: [
                                newPriorityName,
                                localityToName(localityObj.locality),
                            ],
                            locality: localityObj.locality,
                            localityWeight: localityObj.weight,
                            endpointWeight: localityObj.weight * weightedEndpoint.weight,
                            ...weightedEndpoint.endpoint
                        });
                    }
                    newLocalityPriorities.set(localityToName(localityObj.locality), priority);
                }
                const xdsClusterImplConfig = {
                    xds_cluster_impl: {
                        cluster: entry.discoveryMechanism.cluster,
                        drop_categories: priorityEntry.dropCategories,
                        max_concurrent_requests: entry.discoveryMechanism.max_concurrent_requests,
                        eds_service_name: entry.discoveryMechanism.eds_service_name ?? '',
                        lrs_load_reporting_server: entry.discoveryMechanism.lrs_load_reporting_server,
                        child_policy: xdsClusterImplChildPolicy
                    }
                };
                let priorityChildConfig;
                if (environment_1.EXPERIMENTAL_OUTLIER_DETECTION) {
                    priorityChildConfig = {
                        outlier_detection: {
                            ...entry.discoveryMechanism.outlier_detection,
                            child_policy: [xdsClusterImplConfig]
                        }
                    };
                }
                else {
                    priorityChildConfig = xdsClusterImplConfig;
                }
                priorityChildren[newPriorityName] = {
                    config: [priorityChildConfig],
                    ignore_reresolution_requests: entry.discoveryMechanism.type === 'EDS'
                };
            }
            entry.localityPriorities = newLocalityPriorities;
            entry.priorityNames = newPriorityNames;
            fullPriorityList.push(...newPriorityNames);
        }
        const childConfig = {
            priority: {
                children: priorityChildren,
                priorities: fullPriorityList
            }
        };
        let typedChildConfig;
        try {
            typedChildConfig = parseLoadBalancingConfig(childConfig);
        }
        catch (e) {
            trace('LB policy config parsing failed with error ' + e.message);
            this.channelControlHelper.updateState(grpc_js_1.connectivityState.TRANSIENT_FAILURE, new UnavailablePicker({ code: grpc_js_1.status.UNAVAILABLE, details: `LB policy config parsing failed with error ${e.message}`, metadata: new grpc_js_1.Metadata() }));
            return;
        }
        trace('Child update addresses: ' + endpointList.map(endpoint => '(' + endpointToString(endpoint) + ' path=' + endpoint.localityPath + ')'));
        trace('Child update priority config: ' + JSON.stringify(childConfig, undefined, 2));
        this.childBalancer.updateAddressList(endpointList, typedChildConfig, this.latestAttributes);
    }
    updateAddressList(addressList, lbConfig, attributes) {
        if (!(lbConfig instanceof XdsClusterResolverLoadBalancingConfig)) {
            trace('Discarding address list update with unrecognized config ' + JSON.stringify(lbConfig, undefined, 2));
            return;
        }
        trace('Received update with config ' + JSON.stringify(lbConfig, undefined, 2));
        this.latestConfig = lbConfig;
        this.latestAttributes = attributes;
        this.xdsClient = attributes.xdsClient;
        if (this.discoveryMechanismList.length === 0) {
            for (const mechanism of lbConfig.getDiscoveryMechanisms()) {
                const mechanismEntry = {
                    discoveryMechanism: mechanism,
                    localityPriorities: new Map(),
                    priorityNames: [],
                    nextPriorityChildNumber: 0
                };
                if (mechanism.type === 'EDS') {
                    const edsServiceName = mechanism.eds_service_name ?? mechanism.cluster;
                    const watcher = new xds_client_1.Watcher({
                        onResourceChanged: update => {
                            mechanismEntry.latestUpdate = getEdsPriorities(update);
                            this.maybeUpdateChild();
                        },
                        onResourceDoesNotExist: () => {
                            trace('Resource does not exist: ' + edsServiceName);
                            mechanismEntry.latestUpdate = [{ localities: [], dropCategories: [] }];
                        },
                        onError: error => {
                            if (!mechanismEntry.latestUpdate) {
                                trace('xDS request failed with error ' + error);
                                mechanismEntry.latestUpdate = [{ localities: [], dropCategories: [] }];
                            }
                        }
                    });
                    mechanismEntry.watcher = watcher;
                    if (this.xdsClient) {
                        endpoint_resource_type_1.EndpointResourceType.startWatch(this.xdsClient, edsServiceName, watcher);
                    }
                }
                else {
                    const resolver = createResolver({ scheme: 'dns', path: mechanism.dns_hostname }, {
                        onSuccessfulResolution: endpointList => {
                            mechanismEntry.latestUpdate = getDnsPriorities(endpointList);
                            this.maybeUpdateChild();
                        },
                        onError: error => {
                            if (!mechanismEntry.latestUpdate) {
                                trace('DNS resolution for ' + mechanism.dns_hostname + ' failed with error ' + error);
                                mechanismEntry.latestUpdate = [{ localities: [], dropCategories: [] }];
                            }
                        }
                    }, { 'grpc.service_config_disable_resolution': 1 });
                    mechanismEntry.resolver = resolver;
                    resolver.updateResolution();
                }
                this.discoveryMechanismList.push(mechanismEntry);
            }
        }
        else {
            /* The ChildLoadBalancerHandler subclass guarantees that each discovery
             * mechanism in the new update corresponds to the same entry in the
             * existing discoveryMechanismList, and that any differences will not
             * result in changes to the watcher/resolver. */
            for (let i = 0; i < this.discoveryMechanismList.length; i++) {
                this.discoveryMechanismList[i].discoveryMechanism = lbConfig.getDiscoveryMechanisms()[i];
            }
            this.maybeUpdateChild();
        }
    }
    exitIdle() {
        this.childBalancer.exitIdle();
    }
    resetBackoff() {
        this.childBalancer.resetBackoff();
    }
    destroy() {
        for (const mechanismEntry of this.discoveryMechanismList) {
            if (mechanismEntry.watcher) {
                const edsServiceName = mechanismEntry.discoveryMechanism.eds_service_name ?? mechanismEntry.discoveryMechanism.cluster;
                if (this.xdsClient) {
                    endpoint_resource_type_1.EndpointResourceType.cancelWatch(this.xdsClient, edsServiceName, mechanismEntry.watcher);
                }
            }
            mechanismEntry.resolver?.destroy();
        }
        this.discoveryMechanismList = [];
        this.childBalancer.destroy();
    }
    getTypeName() {
        return TYPE_NAME;
    }
}
exports.XdsClusterResolver = XdsClusterResolver;
function maybeServerConfigEqual(config1, config2) {
    if (config1 !== undefined && config2 !== undefined) {
        return (0, xds_bootstrap_1.serverConfigEqual)(config1, config2);
    }
    else {
        return config1 === config2;
    }
}
class XdsClusterResolverChildPolicyHandler extends ChildLoadBalancerHandler {
    configUpdateRequiresNewPolicyInstance(oldConfig, newConfig) {
        if (!(oldConfig instanceof XdsClusterResolverLoadBalancingConfig && newConfig instanceof XdsClusterResolverLoadBalancingConfig)) {
            return super.configUpdateRequiresNewPolicyInstance(oldConfig, newConfig);
        }
        if (oldConfig.getDiscoveryMechanisms().length !== newConfig.getDiscoveryMechanisms().length) {
            return true;
        }
        for (let i = 0; i < oldConfig.getDiscoveryMechanisms().length; i++) {
            const oldDiscoveryMechanism = oldConfig.getDiscoveryMechanisms()[i];
            const newDiscoveryMechanism = newConfig.getDiscoveryMechanisms()[i];
            if (oldDiscoveryMechanism.type !== newDiscoveryMechanism.type ||
                oldDiscoveryMechanism.cluster !== newDiscoveryMechanism.cluster ||
                oldDiscoveryMechanism.eds_service_name !== newDiscoveryMechanism.eds_service_name ||
                oldDiscoveryMechanism.dns_hostname !== newDiscoveryMechanism.dns_hostname ||
                !maybeServerConfigEqual(oldDiscoveryMechanism.lrs_load_reporting_server, newDiscoveryMechanism.lrs_load_reporting_server)) {
                return true;
            }
        }
        return false;
    }
}
exports.XdsClusterResolverChildPolicyHandler = XdsClusterResolverChildPolicyHandler;
function setup() {
    (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, XdsClusterResolver, XdsClusterResolverLoadBalancingConfig);
}
exports.setup = setup;
//# sourceMappingURL=load-balancer-xds-cluster-resolver.js.map