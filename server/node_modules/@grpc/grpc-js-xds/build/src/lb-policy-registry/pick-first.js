"use strict";
/*
 * Copyright 2023 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = void 0;
const util_1 = require("@grpc/proto-loader/build/src/util");
const environment_1 = require("../environment");
const lb_policy_registry_1 = require("../lb-policy-registry");
const PICK_FIRST_TYPE_URL = 'type.googleapis.com/envoy.extensions.load_balancing_policies.pick_first.v3.PickFirst';
const resourceRoot = (0, util_1.loadProtosWithOptionsSync)([
    'envoy/extensions/load_balancing_policies/pick_first/v3/pick_first.proto'
], {
    keepCase: true,
    includeDirs: [
        // Paths are relative to src/build/lb-policy-registry
        __dirname + '/../../../deps/envoy-api/',
        __dirname + '/../../../deps/xds/',
        __dirname + '/../../../deps/protoc-gen-validate'
    ],
});
const toObjectOptions = {
    longs: String,
    enums: String,
    defaults: true,
    oneofs: true
};
function decodePickFirstConfig(message) {
    const name = message.type_url.substring(message.type_url.lastIndexOf('/') + 1);
    const type = resourceRoot.lookup(name);
    if (type) {
        const decodedMessage = type.decode(message.value);
        return decodedMessage.$type.toObject(decodedMessage, toObjectOptions);
    }
    else {
        throw new Error(`TypedStruct parsing error: unexpected type URL ${message.type_url}`);
    }
}
function convertToLoadBalancingPolicy(protoPolicy, selectChildPolicy) {
    if (protoPolicy.typed_config?.type_url !== PICK_FIRST_TYPE_URL) {
        throw new Error(`Pick first LB policy parsing error: unexpected type URL ${protoPolicy.typed_config?.type_url}`);
    }
    const pickFirstMessage = decodePickFirstConfig(protoPolicy.typed_config);
    return {
        pick_first: {
            shuffleAddressList: pickFirstMessage.shuffle_address_list
        }
    };
}
function setup() {
    if (environment_1.EXPERIMENTAL_PICK_FIRST) {
        (0, lb_policy_registry_1.registerLbPolicy)(PICK_FIRST_TYPE_URL, convertToLoadBalancingPolicy);
    }
}
exports.setup = setup;
//# sourceMappingURL=pick-first.js.map